[Run]
load_path= /home/pebert/work/code/mpggit/crossspecies
load_name= pipelines.prep.ppl_prep_transcriptomes

[SpecialFiles]
encmetadata= ${EnvPaths:codebase}/annotation/datasrc/encode/encode_metadata_ro.tsv
deepmetadata= ${EnvPaths:codebase}/annotation/datasrc/deep/20170516_deep.tsv
#srametadata= ${EnvPaths:codebase}/annotation/datasrc/sra/20160706_SRA_expression_fastq.tsv
#srametadata= ${EnvPaths:codebase}/annotation/datasrc/sra/20170328_SRA_expression_fastq.tsv
#srametadata= ${EnvPaths:codebase}/annotation/datasrc/sra/20170516_SRA_expression_fastq.tsv
srametadata= ${EnvPaths:codebase}/annotation/datasrc/sra/20170818_SRA_expression_fastq.tsv
datasetids= ${EnvPaths:codebase}/annotation/exec/datasets.tsv

[Scripts]
mktrans= /home/pebert/work/code/mpggit/creepiest/scripts/preprocess/make_transcriptome.py
mrgens= /home/pebert/work/code/mpggit/creepiest/scripts/preprocess/merge_ucsc_ensembl.py

[Refdata]
refbase= /TL/deep/fhgfs/projects/pebert/thesis/refdata
chromsizes= ${refbase}/chromsizes/chrom_auto

[Pipeline]
name= CSPREPTR

refdatabase= /TL/deep/fhgfs/projects/pebert/thesis/refdata
idxrefdir= ${refdatabase}/transcriptome/qindex
pcgenes= ${refdatabase}/genemodel/subsets/protein_coding
consgenes= ${refdatabase}/conservation/genes

datadir= /TL/deep/fhgfs/projects/pebert/thesis/biodata/dlfolder
refdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/genemodel
sizedir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chromsizes
seqdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/genomes
orthdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/orthologs
tempdir= /TL/deep/fhgfs/projects/pebert/thesis/biodata/pipelined/conversion/encexp
tmpquant= /TL/deep/fhgfs/projects/pebert/thesis/biodata/pipelined/conversion/encexp/tmp
bedout= /TL/deep/fhgfs/projects/pebert/thesis/biodata/pipelined/conversion/encexp/bed
hdfout= /TL/deep/fhgfs/projects/pebert/thesis/biodata/pipelined/conversion/encexp/hdf5

encmd= /home/pebert/work/code/mpggit/creepiest/datasrc/encode/encode_metadata_ro.tsv
sramd= /home/pebert/work/code/mpggit/creepiest/datasrc/sra/20160706_SRA_expression_fastq.tsv

# dump sra to fastq
sradump= fastq-dump --dumpbase --split-files --skip-technical --readids --gzip
 --outdir ${EnvPaths:workdir}/rawdata/temp {{inputfile}}
# check quality and try to detect adapters...
fastqc_raw= fastqc --quiet --outdir {subpath[0][1]}/reports/raw --threads 6 {{inputfile}}
# quantify on transcript/gene level
qallpe= salmon quant --index {index} --threads 15 --libType ISF -1 <(gunzip -c {reads1}) -2 <(gunzip -c {reads2})
 -o {outpath} --forgettingFactor 0.8 --useVBOpt --geneMap ${pcgenes}/{genemap} --seqBias --gcBias --dumpEq --quiet

# produce genome-wide coverage tracks for human, mouse and cow using the STAR aligner
# parameter settings follow recommendations from manual to mimick typical
# ENCODE-like alignment call
gwaln= rm -rf {tmpdir} && STAR --runMode alignReads --runThreadN 15
       --outFileNamePrefix {outdir}
       --genomeDir {srmidx}
       --readFilesCommand gunzip -c
       --readFilesIn {reads1} {reads2}
       --outFilterType BySJout --outFilterMultimapNmax 20 --alignSJoverhangMin 8
       --alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 --outFilterMismatchNoverReadLmax 0.04
       --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000
       --outSAMtype BAM SortedByCoordinate ; rm -rf {tmpdir}
# build index file
alnidx= samtools index -@ 5 {inputfile}
# produce coverage tracks from BAM alignment files
gwcov= bamCoverage -p 5 --binSize 5 --skipNonCoveredRegions -b {{inputfile}} -o {{outputfile}}

covtobed= bigWigToBedGraph {inputfile} stdout | egrep "^chr[0-9]+\s" | gzip > {outputfile}
bgtohdf= creepiest.py -dmp ${EnvPaths:confdump}/convert -wrk 4 convert --task signal
 --input {{inputfiles}} --output {{outputfile}} --chrom-sizes ${Refdata:chromsizes}/{assm}_chrom_auto.tsv
 --output-group {assm}/signal/cov/src
normsig= creepiest.py -dmp ${EnvPaths:confdump}/norm -wrk 1 norm --input {{inputfiles}} --sym-link
 --replace .h5 --suffix .h5 --output-dir ${EnvPaths:workdir}/rawdata/conv/hdf --output-group {ASSM[0]}/signal/cov/norm
 && touch {{outputfile}}


hdfagg= agg_expression.py --input {{inputfiles}} --agg-output {{outputfile}} --split-output {subpath[0][3]}/conv/bed
 --model-dir ${pcgenes} --model-assembly {ASSM[0]} --regime-output {subpath[0][4]}/processing/norm/task_summarize

; the following two tasks are outdated (kept for reference); both replaced with new ortho_multi_pred

;hcop_orth= ortho_pred.py --assembly-a hg19 --assembly-b mm9 --exptab-a {path[0]}/hg19_agg_exp.genes.h5
; --exptab-b {path[0]}/mm9_agg_exp.genes.h5 --orthologs ${refdatabase}/orthologs/hdf/hg19_mm9_hcop_orthologs.h5
; --hdf-out {{outputfile}}
; --json-out ${EnvPaths:workdir}/processing/norm/task_ortho_pred/hg19_mm9_hcop_ortho-pred.json
;
;orthodb_orth= ortho_multi_pred.py --exp-files {inputfiles}
; --ortho-file ${refdatabase}/orthologs/hdf/orthoDB_2015-v9_5vert.h5
; --output {outputfile}

odb_pred= ortho_multi_pred.py --exp-files {inputfiles} --output {outputfile}
          --ortho-file ${orthdir}/hdf/odb9_gene-orthologs.h5 --select-cons 100
          --cons-file ${consgenes}/hg19_pc-genes_phylop_tsswin.h5 ${consgenes}/mm9_pc-genes_phylop_tsswin.h5
          --assm-file /home/pebert/work/code/mpggit/refdata/annotation/assemblies.tsv
          --aln-ranks ${EnvPaths:workdir}/processing/norm/caching/aln_ranking/20180618_gene-aln_ranks.h5

# HCOP ortholog annotation also no longer used
hcop_pred= ortho_multi_pred.py --exp-files {inputfiles} --output {outputfile}
           --ortho-file ${orthdir}/hdf/hcop_6species.h5 --select-cons 100
           --cons-file ${consgenes}/hg19_pc-genes_phylop_tsswin.h5 ${consgenes}/mm9_pc-genes_phylop_tsswin.h5

hdfconv= creepiest.py -nod -wrk 1 convert --task region -i {inputfile}
         -o {outputfile} --name-idx 3 --use-header


[Ruffus]
use_threads= True
jobs= 30
verbose= 1
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=10G,mem_free=5G,slots_free=1,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[MemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=100G,mem_free=30G,slots_free=6,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[ParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=100G,mem_free=25G,slots_free=15,tmp_free=20G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0
