[Run]
load_path= /home/pebert/work/code/mpggit/crossspecies
load_name= pipelines.main.ppl_cs_main

[Annotations]
groupfile= /home/pebert/work/code/mpggit/crossspecies/annotation/exec/grouping.tsv
dsetfile= /home/pebert/work/code/mpggit/crossspecies/annotation/exec/datasets.tsv

[Pipeline]
name= CSMAIN
targets= hg19 mm9
queries= hg19 mm9 bosTau7 susScr2 canFam3
# ref files
regmodel= /home/pebert/work/code/mpggit/creepiest/config/models/reg_randomforest_val.json
clsmodel= /home/pebert/work/code/mpggit/creepiest/config/models/cls_randomforest.json
rnkmodel= /home/pebert/work/code/mpggit/creepiest/config/models/reg_randomforest_rnk.json
# working directory for processing data
workdir= ${EnvPaths:workdir}/processing
# folder containing input data
# this folder contains the q-norm data:
indata= ${EnvPaths:workdir}/rawdata/conv/hdf
# this folder contains the raw/unnormalized data:
; indata= ${EnvPaths:workdir}/rawdata/conv/sigraw

# folders containing reference data
refbase= /TL/deep/fhgfs/projects/pebert/thesis/refdata
refmaps= ${refbase}/chainfiles/hdf_map
refroiexp= ${refbase}/genemodel/subsets/protein_coding/roi_hdf
refgenomes= ${refbase}/genomes/wg_2bit

chromdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chromsizes/rawdata
mapdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/rbest_map
indexdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/rbest_idx
tfmdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/genomes/temp
genedir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/genemodel

# =================================
# Major task: signal correlation
# - compute pairwise correlations (ROI) within species
corrsigroi= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/corr corr --task cons
 --skip-size 25 --measure pearson spearman --limit-to-roi --roi-file {roifile}
 --target-index ${indexdir}/{query}_to_{target}.rbest.mapext.qryidx.h5
 --input-a {{inputfile1}} --input-group-a {target}/signal/cov/src
 --input-b {{inputfile2}} --input-group-b {target}/signal/cov/src
 --output {{outputfile}}
# End of major task: signal correlation
# =====================================

# =================================
# Major task: signal mapping
# - map signal between species using raw map or extended map
# - compute pairwise correlations (whole genome, ROI) across species
mapsig= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/mapsig mapsig --map-file {mapfile}
 --input {{inputfile}} --output {{outputfile}} --allocate-chroms 4
 --output-group {query}/signal/cov/map

corrmaproi= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/corr corr --task cons
 --skip-size 25 --measure pearson spearman --limit-to-roi --roi-file {roifile}
 --target-index ${indexdir}/{target}_to_{query}.rbest.mapext.qryidx.h5
 --input-a {{inputfile1}} --input-group-a {query}/signal/cov/src
 --input-b {{inputfile2}} --input-group-b {query}/signal/cov/map
 --output {{outputfile}}
# End of major task: signal mapping
# =================================

# =================================
# Major task: generate training data for gene expression prediction
#
traindataexp= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/traindata compfeat --task classify
 --kmers 2 3 4 --features prm kmf gc cpg oecpg rep msig dnm --map-file {mapfile}
 --map-reference target --signal-file {datafiles}
 --seq-file ${refgenomes}/{genome}.2bit --add-seq
 --input {{inputfile}} --output {{outputfile}} --output-group {target}/to/{query}/{info}/{regtype}

mrgtraindataexp= creepiest.py --workers 4 -dmp ${EnvPaths:confdump}/merge merge
 --input {mergefiles} --merge-on name symbol
 --add-values {{inputfile}} --from-column tpm_norm rank_norm --output {{outputfile}}
 --output-group {outgroup}

metatraindataexp= creepiest.py --workers 4 -dmp ${EnvPaths:confdump}/merge merge
 --input {mergefiles} --just-stack --add-indicator --output {{outputfile}}
 --output-group {target}/to/{query}/meta/features
# End of major task: training data for gene expression
# =================================

# =================================
# Major task: train models for gene expression prediction
#

trainmodel_expone_seq= creepiest.py --workers 16 -dmp ${EnvPaths:confdump}/train train --model-spec ${clsmodel}
 --input {{inputfile}} --model-output {{outputfile}} --use-features prm kmf gc cpg oecpg rep dnm
 --derive-target "data.tpm_norm >= 1"

trainmodel_expone_sig= creepiest.py --workers 16 -dmp ${EnvPaths:confdump}/train train --model-spec ${clsmodel}
 --input {{inputfile}} --model-output {{outputfile}} --use-features msig
 --derive-target "data.tpm_norm >= 1"

trainmodel_expone_full= creepiest.py --workers 16 -dmp ${EnvPaths:confdump}/train train --model-spec ${clsmodel}
 --input {{inputfile}} --model-output {{outputfile}}
 --derive-target "data.tpm_norm >= 1"

trainmodel_expvalone_seq= creepiest.py --workers 16 -dmp ${EnvPaths:confdump}/train train --model-spec ${rnkmodel}
 --input {{inputfile}} --model-output {{outputfile}} --use-features prm kmf gc cpg oecpg rep dnm
 --target-var rank_norm --subset "tpm_norm >= 1"

trainmodel_expvalone_sig= creepiest.py --workers 16 -dmp ${EnvPaths:confdump}/train train --model-spec ${rnkmodel}
 --input {{inputfile}} --model-output {{outputfile}} --use-features msig
 --target-var rank_norm --subset "tpm_norm >= 1"

trainmodel_expvalone_full= creepiest.py --workers 16 -dmp ${EnvPaths:confdump}/train train --model-spec ${rnkmodel}
 --input {{inputfile}} --model-output {{outputfile}}
 --target-var rank_norm --subset "tpm_norm >= 1"

collect_train_metrics= describe_models.py --input {inputfiles} --output {outputfile}
 --datasets ${Annotations:dsetfile}

# End of major task: train models for gene expression prediction
# =================================

# =================================
# Major task: generate test data for gene expression prediction
#
testdataexp= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/testdata compfeat --task classify
 --kmers 2 3 4 --features prm kmf gc cpg oecpg rep msig dnm --map-file {mapfile}
 --map-reference query --signal-file {datafiles}
 --seq-file ${refgenomes}/{genome}.2bit --add-seq
 --input {{inputfile}} --output {{outputfile}} --output-group {query}/origin/{target}/{info}/{regtype}

mrgtestdataexp= creepiest.py --workers 4 -dmp ${EnvPaths:confdump}/merge merge
 --input {mergefiles} --merge-on name symbol
 --add-values {{inputfile}} --from-column tpm_norm rank_norm --output {{outputfile}}
 --output-group {outgroup}
# End of major task: test data for gene expression
# =================================

# =================================
# Major task: predict gene status (on/off) and level (TPM)
#
# sub task: status based on TPM >= 1
applyexpstatone= creepiest.py --workers 2 -dmp ${EnvPaths:confdump}/apply apply --task test
 --input {inputfile1} --model-file {inputfile2} --derive-target "data.tpm_norm >=1" --no-perm
 --output {outputfile}

# subtask: predict gene expression level based on true status (TPM >= 1)
applyexpvalone= creepiest.py --workers 2 -dmp ${EnvPaths:confdump}/apply apply --task test
 --input {inputfile1} --model-file {inputfile2} --target-var rank_norm --subset "tpm_norm >= 1"
 --no-perm --output {outputfile}

# subtask: predict gene expression level based on predicted status,
# i.e., predict only expression levels for active genes
applyexpvalonepred= creepiest.py --workers 2 -dmp ${EnvPaths:confdump}/apply apply --task test
 --input {{inputfile1}} --model-file {{inputfile2}} --target-var rank_norm --no-perm
 --output {{outputfile}} --subset {mdfile}
 --crp-metadata "[l == 1 for l in md['testing_info']['targets']['pred']]"

mrgtestmd= merge_test_annotations.py -i {inputfiles} -o {outputfile}

# End of: major task predict gene status
# ==================================



[Ruffus]
use_threads= True
jobs= 40
verbose= 2
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=5G,slots_free=2,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[ParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=15G,slots_free=6,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[CVParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=25G,slots_free=16,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[MemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=30G,slots_free=6,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[BigMemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=60G,slots_free=4,tmp_free=20G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0
