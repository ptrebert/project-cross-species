[Run]
load_path= /home/pebert/work/code/mpggit/crossspecies
load_name= pipelines.main.ppl_cs_main

[Annotations]
groupfile= /home/pebert/work/code/mpggit/crossspecies/annotation/exec/grouping.tsv
dsetfile= /home/pebert/work/code/mpggit/crossspecies/annotation/exec/datasets.tsv

[Pipeline]
name= CSMAIN
targets= hg19 mm9
queries= hg19 mm9 bosTau7 susScr2 canFam3 galGal3 equCab2 felCat5 rheMac2 monDom5 oviAri3 oryCun2 rn5
# ref files
valmodel= /home/pebert/work/code/mpggit/creepiest/config/models/reg_randomforest_val.json
clsmodel= /home/pebert/work/code/mpggit/creepiest/config/models/cls_randomforest_large.json
rnkmodel= /home/pebert/work/code/mpggit/creepiest/config/models/reg_randomforest_rnk.json
gbmodel= /home/pebert/work/code/mpggit/creepiest/config/models/cls_gradboost.json
# working directory for processing data
workdir= ${EnvPaths:workdir}/processing
# folder containing input data
# this folder contains the q-norm data:
indata= ${EnvPaths:workdir}/rawdata/conv/hdf
# this folder contains the raw/unnormalized data:
; indata= ${EnvPaths:workdir}/rawdata/conv/sigraw

# folders containing reference data
refbase= /TL/deep/fhgfs/projects/pebert/thesis/refdata
refmaps= ${refbase}/chainfiles/hdf_map
refroiexp= ${refbase}/genemodel/subsets/protein_coding/roi_hdf
refascreg= ${refbase}/enhancer/genehancer_ega
#refascreg= ${refbase}/genemodel/subsets/protein_coding/asc_bed
refgenomes= ${refbase}/genomes/wg_2bit
refgeneagefeat= ${refbase}/geneage/norm

chromdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chromsizes/rawdata
mapdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/hdf_map
tfmdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/genomes/temp
genedir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/genemodel

# =================================
# Major task: signal correlation
# - compute pairwise correlations (ROI) within species
corrsigroi= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/corr corr --task cons
 --skip-size 25 --measure pearson spearman --limit-to-roi --roi-file {roifile}
 --map-file ${mapdir}/{target}_to_{query}.idx.h5 --map-reference target
 --input-a {{inputfile1}} --input-b {{inputfile2}} --output {{outputfile}}
# End of major task: signal correlation
# =====================================

# =================================
# Major task: signal mapping
# - map signal between species using raw map or extended map
# - compute pairwise correlations (whole genome, ROI) across species
mapsig= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/mapsig mapsig --map-file {mapfile}
 --input {{inputfile}} --output {{outputfile}} --allocate-chroms 4
 --output-group {query}/signal/cov/map

corrmaproi= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/corr corr --task cons
 --skip-size 25 --measure pearson spearman --limit-to-roi --roi-file {roifile}
 --map-file ${mapdir}/{target}_to_{query}.idx.h5 --map-reference query
 --input-a {{inputfile1}} --input-b {{inputfile2}} --output {{outputfile}}
# End of major task: signal mapping
# =================================

# =================================
# Major task: generate training data for gene expression prediction
#
traindataexp= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/traindata compfeat --task classify
 --kmers 2 3 4 --features {features} {ascregfeat} --map-file {mapfile}
 --map-reference target --signal-file {datafiles} {ascregfile}
 --seq-file ${refgenomes}/{genome}.2bit --add-seq
 --input {{inputfile}} --output {{outputfile}} --output-group {target}/to/{query}/{info}/{regtype}

mrgtraindataexp= creepiest.py --workers 4 -dmp ${EnvPaths:confdump}/merge merge
 --input {mergefiles} --merge-on name symbol
 --add-values {{inputfile}} --from-column tpm_norm rank_norm --output {{outputfile}}
 --output-group {outgroup}

# End of major task: training data for gene expression
# =================================

# =================================
# Major task: generate test data for gene expression prediction
#
testdataexp= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/testdata compfeat --task classify
 --kmers 2 3 4 --features {features} {ascregfeat} --map-file {mapfile}
 --map-reference query --signal-file {datafiles} {ascregfile}
 --seq-file ${refgenomes}/{genome}.2bit --add-seq
 --input {{inputfile}} --output {{outputfile}} --output-group {query}/origin/{target}/{info}/{regtype}

mrgtestdataexp= creepiest.py --workers 4 -dmp ${EnvPaths:confdump}/merge merge
 --input {mergefiles} --merge-on name symbol
 --add-values {{inputfile}} --from-column tpm_norm rank_norm --output {{outputfile}}
 --output-group {outgroup}
# End of major task: test data for gene expression
# =================================

# =================================
# Major task: train and apply models for gene expression prediction
#

# Model ==============================
# train model using GC features only to predict gene status (on/off => TPM >= 1)
# Somewhat the most simple model conceivable
trainmodel_expstat_gcf_run= True

trainmodel_expstat_gcf= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/train train --model-spec ${gbmodel}
 --input {{inputfile}} --model-output {{outputfile}} --use-features gc cpg oecpg
 --keep-features "ft(gc|cpg|oecpg)_\w+_reg5p$$" --balance -cv 5 --sub-sample 2500
 --derive-target "data.tpm_norm >= 1"

# apply sequence model to test data and predict status
apply_expstat_gcf= creepiest.py --workers 2 -dmp ${EnvPaths:confdump}/apply apply --task test
 --input {inputfile1} --model-file {inputfile2} --derive-target "data.tpm_norm >= 1"
 --num-perm 1000 --perm-extra-scorer roc_auc --output {outputfile}

# Model ==================================
# canonical chromatin model: histone signal for three canonical modifications known to be
# predictive of gene expression status (on/off => TPM >= 1)
trainmodel_expstat_can_run= True

trainmodel_expstat_can= creepiest.py --workers 6 -dmp ${EnvPaths:confdump}/train train --model-spec ${gbmodel}
 --input {{inputfile}} --model-output {{outputfile}} --use-features msig
 --derive-target "data.tpm_norm >= 1" --balance --sub-sample 2500 -cv 5
 --keep-features "ftmsig_H3K(36me3_abs_mean_body|4me3_abs_mean_reg5p|27ac_abs_mean_reg5p)$$"

# apply sequence model to test data and predict status
apply_expstat_can= creepiest.py --workers 2 -dmp ${EnvPaths:confdump}/apply apply --task test
 --input {inputfile1} --model-file {inputfile2} --derive-target "data.tpm_norm >= 1"
 --num-perm 1000 --perm-extra-scorer roc_auc --output {outputfile}

# End of major task: train models for gene expression prediction
# =================================

summ_perf_status= agg_gene_status.py --output {outputfile} --orthologs ${refbase}/orthologs/hdf/odb9_gene-orthologs.h5 --select-cons 100

lola_enrich= run_lola_enrichment.R -a {assembly} --database {database} -i {{inputfile}} --cores 6
             -r TRUE -s {infix}

train_geneage_model= gene_age.py --jobs 14 --train --classify --out {outputfile}

[Ruffus]
use_threads= True
jobs= 50
verbose= 1
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=15G,mem_free=10G,slots_free=3,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[ParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=30G,mem_free=15G,slots_free=6,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[CVParallelJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=70G,mem_free=40G,slots_free=14,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[MemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=50G,mem_free=30G,slots_free=6,tmp_free=5G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0

[BigMemJobConfig]
jobname= ${Pipeline:name}
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l h_vmem=100G,mem_free=60G,slots_free=4,tmp_free=20G
scriptdir= ${EnvPaths:ruffusdump}
keepscripts= 0
